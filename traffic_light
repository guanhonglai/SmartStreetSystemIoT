#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define API_KEY "AIzaSyBM9PnDavtOXz435UDSz74CcQSKgSzmZpY"
#define DATABASE_URL "https://iot-smart-city-e86cd-default-rtdb.firebaseio.com"
#define WIFI_SSID "B100M"
#define WIFI_PASSWORD "12345678"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
unsigned long sendDataPrevMillis2 = 0;
int south, west, east = 0;
bool signupOK = false;

// Define LED pins for the South traffic light set
const int redSouth = 15;
const int yellowSouth = 2;
const int greenSouth = 4;

// Define LED pins for the West traffic light set
const int redWest = 13;
const int yellowWest = 12;
const int greenWest = 14;

// Define LED pins for the East traffic light set
const int redEast = 5;
const int yellowEast = 26;
const int greenEast = 25;

// Define pins for South ultrasonic sensor
const int trigPinSouth = 18;
const int echoPinSouth = 19;

// Define pins for West ultrasonic sensor
const int trigPinWest = 32;
const int echoPinWest = 35;

// Define pins for East ultrasonic sensor
const int trigPinEast = 21;
const int echoPinEast = 22;

const unsigned long fullGreenDuration = 30000;
const unsigned long noCarThreshold = 5000;
const unsigned long blinkStart = 5000;
const long maxDistance = 10;

void setup_wifi() {
  delay(10);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi reconnecting...");
    delay(500);
  }
  Serial.println("WiFi connected.");
}

void initializeFirebase() {
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("ok");
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  initializeFirebase();

  // Initialize the LED pins as outputs for South traffic light
  pinMode(redSouth, OUTPUT);
  pinMode(yellowSouth, OUTPUT);
  pinMode(greenSouth, OUTPUT);

  // Initialize the LED pins as outputs for West traffic light
  pinMode(redWest, OUTPUT);
  pinMode(yellowWest, OUTPUT);
  pinMode(greenWest, OUTPUT);

  // Initialize the LED pins as outputs for East traffic light
  pinMode(redEast, OUTPUT);
  pinMode(yellowEast, OUTPUT);
  pinMode(greenEast, OUTPUT);

  // Initialize ultrasonic sensor pins for South, West, and East
  pinMode(trigPinSouth, OUTPUT);
  pinMode(echoPinSouth, INPUT);

  pinMode(trigPinWest, OUTPUT);
  pinMode(echoPinWest, INPUT);

  pinMode(trigPinEast, OUTPUT);
  pinMode(echoPinEast, INPUT);

  digitalWrite(redSouth, HIGH);
  digitalWrite(redWest, HIGH);
  digitalWrite(redEast, HIGH);

  Serial.println("All lights are RED.");
}

long measureDistance(int trigPin, int echoPin, long maxDistance) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  long distance = (duration / 2) / 29.1;

  if (distance > maxDistance) {
    distance = maxDistance;
  }

  return distance;
}

void blinkGreenLight(int greenPin, int blinkCount, int blinkInterval) {
  for (int i = 0; i < blinkCount; i++) {
    digitalWrite(greenPin, HIGH);
    delay(blinkInterval);
    digitalWrite(greenPin, LOW);
    delay(blinkInterval);
  }
}

void greenPhase(int redPin, int greenPin, int trigPin, int echoPin) {
  unsigned long startTime = millis();
  unsigned long duration = fullGreenDuration;

  unsigned long noCarStart = 0;
  bool noCarDetected = false;

  digitalWrite(redPin, LOW);
  digitalWrite(greenPin, HIGH);
  Serial.println("Green light ON.");

  String direction = "";
  if (trigPin == trigPinSouth) {
    direction = "south";
  } else if (trigPin == trigPinWest) {
    direction = "west";
  } else if (trigPin == trigPinEast) {
    direction = "east";
  }

  while (millis() - startTime < duration) {
    long distance = measureDistance(trigPin, echoPin, maxDistance);

    if (distance > 3) {
      if (!noCarDetected) {
        noCarDetected = true;
        noCarStart = millis();
      }

      if (millis() - noCarStart >= noCarThreshold) {
        duration = millis() - startTime + blinkStart;
        Serial.println(
            "No car detected for 5 seconds. Reducing green light duration.");
        break;
      }

    } else {
      noCarDetected = false;
      int carCount = getCarCount(direction);
      carCount++;
      setCarCount(direction, carCount);
    }

    if (millis() - startTime >= duration - blinkStart) {
      break;
    }

    delay(1500);
  }

  blinkGreenLight(greenPin, 5, 500);
  digitalWrite(greenPin, LOW);
  Serial.println("Green light OFF.");
}

void yellowPhase(int yellowPin, int redPin) {
  digitalWrite(yellowPin, HIGH);
  Serial.println("Yellow light ON.");
  delay(2000);
  digitalWrite(yellowPin, LOW);
  digitalWrite(redPin, HIGH);
}

void southTrafficLight() {
  Serial.println("South light sequence starting.");
  greenPhase(redSouth, greenSouth, trigPinSouth, echoPinSouth);
  yellowPhase(yellowSouth, redSouth);
  Serial.println("South light sequence finished.");
}

void westTrafficLight() {
  Serial.println("West light sequence starting.");
  greenPhase(redWest, greenWest, trigPinWest, echoPinWest);
  yellowPhase(yellowWest, redWest);
  Serial.println("West light sequence finished.");
}

void eastTrafficLight() {
  Serial.println("East light sequence starting.");
  greenPhase(redEast, greenEast, trigPinEast, echoPinEast);
  yellowPhase(yellowEast, redEast);
  Serial.println("East light sequence finished.");
}

int getCarCount(String direction) {
  if (Firebase.ready() && signupOK &&
      (millis() - sendDataPrevMillis > 1500 || sendDataPrevMillis == 0)) {
    sendDataPrevMillis = millis();
    String fullPath = "/car_count/" + direction;
    if (Firebase.RTDB.getInt(&fbdo, fullPath)) {
      int car_count = fbdo.intData();
      Serial.println("Car Count: ");
      Serial.println(car_count);

      return car_count;
    } else {
      Serial.println("Failed");
      Serial.println("Reason:" + fbdo.errorReason());
    }
  } else {
    Serial.println("Firebase failed");
  }

  return -1;
}

void setCarCount(String direction, int carCount) {
  if (Firebase.ready() && signupOK &&
      (millis() - sendDataPrevMillis2 > 1500 || sendDataPrevMillis2 == 0)) {
    sendDataPrevMillis2 = millis();

    // Update the car count for the specific direction
    String fullPath = "/car_count/" + direction;
    if (Firebase.RTDB.setInt(&fbdo, fullPath, carCount)) {
      Serial.println("Car Count updated for " + direction + ": " + carCount);

      // After updating the car count, update the common timestamp
      String timestampPath = "/car_count/timestamp";
      if (Firebase.RTDB.setInt(&fbdo, timestampPath, Firebase.FST)) {
        Serial.println("Timestamp updated.");
      } else {
        Serial.println("Failed to update timestamp");
        Serial.println("Reason: " + fbdo.errorReason());
      }
    } else {
      Serial.println("Failed to update car count");
      Serial.println("Reason: " + fbdo.errorReason());
    }
  } else {
    Serial.println("Firebase connection failed");
  }
}

void loop() {
  Serial.println("Starting traffic light sequence.");
  // Traffic light sequence: South -> West -> East
  southTrafficLight();
  delay(1500);
  westTrafficLight();
  delay(1500);
  eastTrafficLight();
  delay(1500);
}
