#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define API_KEY "AIzaSyBM9PnDavtOXz435UDSz74CcQSKgSzmZpY"
#define DATABASE_URL "https://iot-smart-city-e86cd-default-rtdb.firebaseio.com"
#define WIFI_SSID "B100M"
#define WIFI_PASSWORD "12345678"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
unsigned long sendDataPrevMillis2 = 0;
int north,east,west = 0;
bool signupOK = false;

// Define LED pins for the North traffic light set
const int redNorth = 27;   
const int yellowNorth = 26;  
const int greenNorth = 25;   

// Define LED pins for the East traffic light set
const int redEast = 13;  
const int yellowEast = 12;  
const int greenEast = 14;   

// Define LED pins for the West traffic light set
const int redWest = 15;  
const int yellowWest = 2;  
const int greenWest = 4;   

// Define pins for North ultrasonic sensor
const int trigPinNorth = 18;  
const int echoPinNorth = 19;  

// Define pins for East ultrasonic sensor
const int trigPinEast = 32;  
const int echoPinEast = 35;  

// Define pins for West ultrasonic sensor
const int trigPinWest = 21;  
const int echoPinWest = 22;  

// Define time parameters
const unsigned long fullGreenDuration = 30000; // 30 seconds
const unsigned long noCarThreshold = 5000;     // 5 seconds without a car
const unsigned long blinkStart = 5000;         // Start blinking 5 seconds before the green phase ends
const long maxDistance = 50;                  // Maximum valid distance from ultrasonic sensors (in cm)

void setup_wifi(){
  delay(10);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while(WiFi.status() != WL_CONNECTED){
    Serial.println("WiFi reconnecting...");
    delay(500);
  }
  Serial.println("WiFi connected.");
}

void initializeFirebase(){
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  
  if(Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }
  
  config.token_status_callback = tokenStatusCallback;
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void setup() {
  Serial.begin(115200);  // Start serial communication for debugging
  
  setup_wifi();
  initializeFirebase();

  // Initialize the LED pins as outputs for North traffic light
  pinMode(redNorth, OUTPUT);
  pinMode(yellowNorth, OUTPUT);
  pinMode(greenNorth, OUTPUT);

  // Initialize the LED pins as outputs for East traffic light
  pinMode(redEast, OUTPUT);
  pinMode(yellowEast, OUTPUT);
  pinMode(greenEast, OUTPUT);
  
  // Initialize the LED pins as outputs for West traffic light
  pinMode(redWest, OUTPUT);
  pinMode(yellowWest, OUTPUT);
  pinMode(greenWest, OUTPUT);
  
  // Initialize ultrasonic sensor pins for North, East, and West
  pinMode(trigPinNorth, OUTPUT);
  pinMode(echoPinNorth, INPUT);
  
  pinMode(trigPinEast, OUTPUT);
  pinMode(echoPinEast, INPUT);
  
  pinMode(trigPinWest, OUTPUT);
  pinMode(echoPinWest, INPUT);
  
  // Start with all red lights on
  digitalWrite(redNorth, HIGH);
  digitalWrite(redEast, HIGH);
  digitalWrite(redWest, HIGH);
  
  Serial.println("All lights are RED.");
}

// Function to measure distance using ultrasonic sensor with a max distance cap
long measureDistance(int trigPin, int echoPin, long maxDistance) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  long duration = pulseIn(echoPin, HIGH);
  long distance = (duration / 2) / 29.1; // Calculate distance in cm
  
  // Cap the measured distance to maxDistance
  if (distance > maxDistance) {
    distance = maxDistance;
  }
  
  return distance;
}

// Blink the green light a specified number of times with a delay interval
void blinkGreenLight(int greenPin, int blinkCount, int blinkInterval) {
  for (int i = 0; i < blinkCount; i++) {
    digitalWrite(greenPin, HIGH);  // Turn green light on
    delay(blinkInterval);          // Wait for the blink interval
    digitalWrite(greenPin, LOW);   // Turn green light off
    delay(blinkInterval);          // Wait for the blink interval
  }
}

// Function for green phase with car detection
void greenPhase(int redPin, int greenPin, int trigPin, int echoPin) {
  unsigned long startTime = millis();
  unsigned long duration = fullGreenDuration;
  
  unsigned long noCarStart = 0;
  bool noCarDetected = false;
  
  digitalWrite(redPin, LOW);    // Turn off red
  digitalWrite(greenPin, HIGH); // Turn on green
  Serial.println("Green light ON.");
  String direction = "";
  if(trigPin == 18){
    direction = "north";
  }
  else if(trigPin == 32){
    direction = "east";
  }
  else if(trigPin == 21){
    direction ="west";
  }
  
  while (millis() - startTime < duration) {
    long distance = measureDistance(trigPin, echoPin, maxDistance);
    
    // Check for car presence
    if (distance > 3) {  // No car detected (distance greater than 50 cm)
      if (!noCarDetected) {
        noCarDetected = true;
        noCarStart = millis();  // Start counting since no car was detected
      }
      
      // If no car has been detected for 5 seconds, reduce the green light duration
      if (millis() - noCarStart >= noCarThreshold) {
        duration = millis() - startTime + blinkStart;  // Adjust the duration to add blinking
        Serial.println("No car detected for 5 seconds. Reducing green light duration.");
        break;
      }
      
    } else {
      // If a car is detected, reset the no-car detection timer
      noCarDetected = false;
      int carCount = 0;
      carCount = getCarCount(direction);
      carCount++;
      setCarCount(direction, carCount);

    }

    // If we're within the final 5 seconds of the green phase, start blinking
    if (millis() - startTime >= duration - blinkStart) {
      break;
    }

    delay(1500);  // Short delay to reduce sensor polling rate
  }

  // Blink the green light for the last 5 seconds before turning it off
  blinkGreenLight(greenPin, 5, 500);  // Blink 5 times with a 0.5-second interval
  
  digitalWrite(greenPin, LOW);  // Turn off green light
  Serial.println("Green light OFF.");
}

// Function for yellow phase
void yellowPhase(int yellowPin, int redPin) {
  digitalWrite(yellowPin, HIGH); // Turn on yellow
  Serial.println("Yellow light ON.");
  delay(2000);                    // Yellow light for 2 seconds
  digitalWrite(yellowPin, LOW);  // Turn off yellow
  digitalWrite(redPin, HIGH);    // Turn red back on
}

// North traffic light sequence
void northTrafficLight() {
  Serial.println("North light sequence starting.");
  greenPhase(redNorth, greenNorth, trigPinNorth, echoPinNorth); 
  yellowPhase(yellowNorth, redNorth); 
  Serial.println("North light sequence finished.");
}

// East traffic light sequence
void eastTrafficLight() {
  Serial.println("East light sequence starting.");
  greenPhase(redEast, greenEast, trigPinEast, echoPinEast);  
  yellowPhase(yellowEast, redEast);
  Serial.println("East light sequence finished.");
}

// West traffic light sequence
void westTrafficLight() {
  Serial.println("West light sequence starting.");
  greenPhase(redWest, greenWest, trigPinWest, echoPinWest);  
  yellowPhase(yellowWest, redWest);
  Serial.println("West light sequence finished.");
}

int getCarCount(String direction){
  if(Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 1000 || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();
    String fullPath = "/car_count/" + direction;
    if(Firebase.RTDB.getInt(&fbdo, fullPath)){
      int car_count = fbdo.intData();
      Serial.println("Car Count: ");
      Serial.println(car_count);

      return car_count;
    }
    else{
      Serial.println("Failed");
      Serial.println("Reason:" + fbdo.errorReason());
    }
  }
  else{
    Serial.println("Firebase failed");
  }

  return -1;
}

void setCarCount(String direction, int carCount){
  if(Firebase.ready() && signupOK && (millis() - sendDataPrevMillis2 > 1000 || sendDataPrevMillis2 == 0)){
    sendDataPrevMillis2 = millis();
    String fullPath = "/car_count/" + direction;
    if(Firebase.RTDB.setInt(&fbdo, fullPath, carCount)){
      Serial.println("Car Count updated for " + direction + " " + carCount);
    }
    else{
      Serial.println("Failed");
      Serial.println("Reason:" + fbdo.errorReason());
    }
  }
  else{
    Serial.println("Firebase failed");
  }
}

void loop() {
  Serial.println("Starting traffic light sequence.");
  // Traffic light sequence: North -> East -> West
  northTrafficLight();  
  delay(1500);
  eastTrafficLight();
  delay(1500);
  westTrafficLight();
  delay(1500);
}
