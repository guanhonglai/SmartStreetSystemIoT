// Define LED pins for the North traffic light set
const int redNorth = 15;   
const int yellowNorth = 2;  
const int greenNorth = 4;   

// Define LED pins for the South traffic light set
const int redSouth = 13;  
const int yellowSouth = 12;  
const int greenSouth = 14;   

// Define LED pins for the East traffic light set
const int redEast = 25;
const int yellowEast = 33; 
const int greenEast = 32;  

// Define LED pins for the West traffic light set
const int redWest = 18;   
const int yellowWest = 19;  
const int greenWest = 21;  

// Define ultrasonic sensor pins for the North lane
const int trigNorth = 22;  
const int echoNorth = 23;

// Variables for ultrasonic sensor
long duration;
int distance;

// Minimum distance to detect a car (in cm)
const int maxDistance = 50;  // Maximum distance to shorten the green light
const unsigned long carDetectionTime = 5000;  // 5 seconds for detection to trigger shortening

void setup() {
  Serial.begin(115200);  // Start serial communication for debugging

  // Initialize the LED pins as outputs for all traffic lights
  pinMode(redNorth, OUTPUT);
  pinMode(yellowNorth, OUTPUT);
  pinMode(greenNorth, OUTPUT);

  pinMode(redSouth, OUTPUT);
  pinMode(yellowSouth, OUTPUT);
  pinMode(greenSouth, OUTPUT);

  pinMode(redEast, OUTPUT);
  pinMode(yellowEast, OUTPUT);
  pinMode(greenEast, OUTPUT);

  pinMode(redWest, OUTPUT);
  pinMode(yellowWest, OUTPUT);
  pinMode(greenWest, OUTPUT);

  // Initialize ultrasonic sensor pins
  pinMode(trigNorth, OUTPUT);
  pinMode(echoNorth, INPUT);
  
  // Start with all red lights on
  digitalWrite(redNorth, HIGH);
  digitalWrite(redSouth, HIGH);
  digitalWrite(redEast, HIGH);
  digitalWrite(redWest, HIGH);
  
  Serial.println("All lights are RED.");
}

// Function to measure distance using ultrasonic sensor
int getDistance() {
  // Clear the trigPin by setting it LOW
  digitalWrite(trigNorth, LOW);
  delayMicroseconds(2);

  // Trigger the sensor by setting the trigPin HIGH for 10 microseconds
  digitalWrite(trigNorth, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigNorth, LOW);

  // Read the echoPin and calculate the distance in cm
  duration = pulseIn(echoNorth, HIGH);
  distance = duration * 0.034 / 2;  // Speed of sound in air = 0.034 cm/us
  return distance;
}

void blinkGreenLight(int greenPin, int blinkCount, int blinkInterval) {
  // Blink the green light
  for (int i = 0; i < blinkCount; i++) {
    digitalWrite(greenPin, HIGH);  // Turn green light on
    delay(blinkInterval);          // Wait for the blink interval
    digitalWrite(greenPin, LOW);   // Turn green light off
    delay(blinkInterval);          // Wait for the blink interval
  }
}

void greenPhase(int redPin, int greenPin, unsigned long greenDuration) {
  delay(1000);  // 1-second delay before green light turns on
  digitalWrite(redPin, LOW);    // Turn off red
  digitalWrite(greenPin, HIGH); // Turn on green
  Serial.println("Green light ON.");

  // Set the green light to last for the specified duration
  delay(greenDuration);
  
  // Blink the green light
  blinkGreenLight(greenPin, 5, 500);  // Blink green light 5 times with a 0.5 second interval
  digitalWrite(greenPin, LOW);        // Ensure green is off after blinking
}

void yellowPhase(int yellowPin, int redPin) {
  digitalWrite(yellowPin, HIGH); // Turn on yellow
  Serial.println("Yellow light ON.");
  delay(2000);                    // Yellow light for 2 seconds
  digitalWrite(yellowPin, LOW);  // Turn off yellow
  digitalWrite(redPin, HIGH);    // Turn red back on
}

void northTrafficLight() {
  Serial.println("North light sequence starting.");
  
  unsigned long greenDuration = 25000;  // Default 25 seconds green light duration
  unsigned long startMillis = millis();  // Start time for the green phase
  
  bool greenShortened = false;  // Flag to indicate if green was shortened
  unsigned long detectStartMillis = millis();  // Time when distance exceeds threshold
  
  // Turn on the green light
  digitalWrite(redNorth, LOW);    // Turn off red
  digitalWrite(greenNorth, HIGH); // Turn on green
  Serial.println("Green light ON (North).");

  while (millis() - startMillis < greenDuration) {
    int currentDistance = getDistance();
    Serial.print("North lane distance: ");
    Serial.println(currentDistance);

    // Check if distance exceeds 50 cm
    if (currentDistance > maxDistance) {
      if (!greenShortened) {
        // Update detectStartMillis if the distance exceeds threshold
        detectStartMillis = millis();
      }
    } else {
      // Reset detectStartMillis if distance is within the threshold
      detectStartMillis = millis();
    }
    
    // Check if distance exceeds 50 cm for 5 seconds
    if (millis() - detectStartMillis >= carDetectionTime) {
      if (!greenShortened) {
        greenDuration = millis() - startMillis + 5000;  // Shorten green to 5 seconds
        greenShortened = true;
        Serial.println("Distance exceeds 50 cm for 5 seconds, green light shortened.");
      }
    }

    delay(1000);  // Check every 500ms
  }
  
  // Blink the green light before switching to yellow
  blinkGreenLight(greenNorth, 5, 500);  // Blink green light 5 times with a 0.5 second interval
  digitalWrite(greenNorth, LOW);        // Ensure green is off after blinking

  // Proceed with yellow phase
  yellowPhase(yellowNorth, redNorth); 
  Serial.println("North light sequence finished.");
}

void southTrafficLight() {
  Serial.println("South light sequence starting.");
  greenPhase(redSouth, greenSouth, 25000);  // Fixed 25-second duration
  yellowPhase(yellowSouth, redSouth);
  Serial.println("South light sequence finished.");
}

void eastTrafficLight() {
  Serial.println("East light sequence starting.");
  greenPhase(redEast, greenEast, 25000);  // Fixed 25-second duration
  yellowPhase(yellowEast, redEast); 
  Serial.println("East light sequence finished.");
}

void westTrafficLight() {
  Serial.println("West light sequence starting.");
  greenPhase(redWest, greenWest, 25000);  // Fixed 25-second duration
  yellowPhase(yellowWest, redWest);
  Serial.println("West light sequence finished.");
}

void loop() {
  Serial.println("Starting traffic light sequence.");
  
  // Start with all red lights on for 1 second
  delay(1000);
  
  // Traffic light sequence: North -> South -> East -> West
  northTrafficLight();  
  southTrafficLight();  
  eastTrafficLight();  
  westTrafficLight();  
}
