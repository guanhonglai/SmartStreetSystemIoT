// Define LED pins for the North traffic light set
const int redNorth = 15;   
const int yellowNorth = 2;  
const int greenNorth = 4;   

// Define LED pins for the South traffic light set
const int redSouth = 13;  
const int yellowSouth = 12;  
const int greenSouth = 14;   

// Define LED pins for the East traffic light set
const int redEast = 25;
const int yellowEast = 33; 
const int greenEast = 32;  

// Define LED pins for the West traffic light set
const int redWest = 18;   
const int yellowWest = 19;  
const int greenWest = 21;  

// Define ultrasonic sensor pins for the North lane
const int trigNorth = 22;  
const int echoNorth = 23;

// Variables for ultrasonic sensor
long duration;
int distance;

// Minimum distance to detect a car (in cm)
const int maxDistance = 50;  // Maximum distance to shorten the green light
const unsigned long carDetectionTime = 5000;  // 5 seconds for detection to trigger shortening
const unsigned long defaultGreenDuration = 25000;  // Default 25 seconds green light duration
const unsigned long shortenedGreenDuration = 5000;  // Shortened 5 seconds green light duration

void setup() {
  Serial.begin(115200);  // Start serial communication for debugging

  // Initialize the LED pins as outputs for all traffic lights
  pinMode(redNorth, OUTPUT);
  pinMode(yellowNorth, OUTPUT);
  pinMode(greenNorth, OUTPUT);

  pinMode(redSouth, OUTPUT);
  pinMode(yellowSouth, OUTPUT);
  pinMode(greenSouth, OUTPUT);

  pinMode(redEast, OUTPUT);
  pinMode(yellowEast, OUTPUT);
  pinMode(greenEast, OUTPUT);

  pinMode(redWest, OUTPUT);
  pinMode(yellowWest, OUTPUT);
  pinMode(greenWest, OUTPUT);

  // Initialize ultrasonic sensor pins
  pinMode(trigNorth, OUTPUT);
  pinMode(echoNorth, INPUT);
  
  // Start with all red lights on
  digitalWrite(redNorth, HIGH);
  digitalWrite(redSouth, HIGH);
  digitalWrite(redEast, HIGH);
  digitalWrite(redWest, HIGH);
  
  Serial.println("All lights are RED.");
}

// Function to measure distance using ultrasonic sensor
int getDistance() {
  // Clear the trigPin by setting it LOW
  digitalWrite(trigNorth, LOW);
  delayMicroseconds(2);

  // Trigger the sensor by setting the trigPin HIGH for 10 microseconds
  digitalWrite(trigNorth, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigNorth, LOW);

  // Read the echoPin and calculate the distance in cm
  duration = pulseIn(echoNorth, HIGH);
  distance = duration * 0.034 / 2;  // Speed of sound in air = 0.034 cm/us
  return distance;
}

void blinkGreenLight(int greenPin, int blinkCount, int blinkInterval) {
  // Blink the green light
  for (int i = 0; i < blinkCount; i++) {
    digitalWrite(greenPin, HIGH);  // Turn green light on
    delay(blinkInterval);          // Wait for the blink interval
    digitalWrite(greenPin, LOW);   // Turn green light off
    delay(blinkInterval);          // Wait for the blink interval
  }
}

void trafficLightSequence(int redPin, int yellowPin, int greenPin, bool isNorth) {
  Serial.println("Traffic light sequence starting.");
  
  unsigned long greenDuration = defaultGreenDuration;
  
  if (isNorth) {
    int currentDistance = getDistance();
    Serial.print("North lane distance: ");
    Serial.println(currentDistance);
    
    if (currentDistance > maxDistance) {
      greenDuration = shortenedGreenDuration;
      Serial.println("No car detected, green light duration shortened.");
    }
  }
  
  // Green phase
  delay(1000);  // 1-second delay before green light turns on
  digitalWrite(redPin, LOW);    // Turn off red
  digitalWrite(greenPin, HIGH); // Turn on green
  Serial.println("Green light ON.");
  delay(greenDuration);
  
  // Blink the green light
  blinkGreenLight(greenPin, 5, 500);  // Blink green light 5 times with a 0.5 second interval
  digitalWrite(greenPin, LOW);        // Ensure green is off after blinking

  // Yellow phase
  digitalWrite(yellowPin, HIGH); // Turn on yellow
  Serial.println("Yellow light ON.");
  delay(2000);                   // Yellow light for 2 seconds
  digitalWrite(yellowPin, LOW);  // Turn off yellow
  digitalWrite(redPin, HIGH);    // Turn red back on
  
  Serial.println("Traffic light sequence finished.");
}

void loop() {
  Serial.println("Starting traffic light sequence.");
  
  // Start with all red lights on for 1 second
  delay(1000);
  
  // Traffic light sequence: North -> South -> East -> West
  trafficLightSequence(redNorth, yellowNorth, greenNorth, true);  // North with ultrasonic detection
  trafficLightSequence(redSouth, yellowSouth, greenSouth, false);
  trafficLightSequence(redEast, yellowEast, greenEast, false);
  trafficLightSequence(redWest, yellowWest, greenWest, false);
}
